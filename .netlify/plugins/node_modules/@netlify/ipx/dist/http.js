"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSourceImage = exports.CACHE_PRUNING_THRESHOLD = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const node_fetch_1 = __importStar(require("node-fetch"));
const unstorage_1 = require("unstorage");
const fs_1 = __importDefault(require("unstorage/drivers/fs"));
const murmurhash_1 = __importDefault(require("murmurhash"));
const etag_1 = __importDefault(require("etag"));
const utils_1 = require("./utils");
const NOT_MODIFIED = 304;
const GATEWAY_ERROR = 502;
const USAGE_TRACKING_KEY = 'usage-tracking';
const trackingLock = new utils_1.Lock();
async function getTracking(metadataStore) {
    var _a;
    return ((_a = (await metadataStore.getItem(USAGE_TRACKING_KEY))) !== null && _a !== void 0 ? _a : {});
}
async function markUsageStart(metadataStore, cacheKey, inputCacheFile) {
    await trackingLock.acquire();
    try {
        const tracking = await getTracking(metadataStore);
        let usageTrackingItem = tracking[cacheKey];
        if (!usageTrackingItem) {
            tracking[cacheKey] = usageTrackingItem = {
                runningCount: 0,
                lastAccess: 0,
                size: 0,
                cacheKey,
                inputCacheFile
            };
        }
        usageTrackingItem.runningCount++;
        usageTrackingItem.lastAccess = Date.now();
        await metadataStore.setItem(USAGE_TRACKING_KEY, tracking);
    }
    finally {
        trackingLock.release();
    }
}
async function markUsageComplete(metadataStore, cacheKey) {
    await trackingLock.acquire();
    try {
        const tracking = await getTracking(metadataStore);
        const usageTrackingItem = tracking[cacheKey];
        if (usageTrackingItem) {
            usageTrackingItem.runningCount--;
            if (await (0, fs_extra_1.pathExists)(usageTrackingItem.inputCacheFile)) {
                const { size } = await (0, fs_extra_1.stat)(usageTrackingItem.inputCacheFile);
                usageTrackingItem.size = size;
            }
            else {
                // If the file doesn't exist, we can't track it
                delete tracking[cacheKey];
            }
            await metadataStore.setItem(USAGE_TRACKING_KEY, tracking);
        }
    }
    finally {
        trackingLock.release();
    }
}
exports.CACHE_PRUNING_THRESHOLD = 50 * 1024 * 1024;
async function maybePruneCache(metadataStore) {
    await trackingLock.acquire();
    try {
        const tracking = await getTracking(metadataStore);
        let totalSize = 0;
        let totalSizeAvailableToPrune = 0;
        const prunableItems = [];
        for (const trackingItem of Object.values(tracking)) {
            totalSize += trackingItem.size;
            if (trackingItem.runningCount === 0) {
                totalSizeAvailableToPrune += trackingItem.size;
                prunableItems.push(trackingItem);
            }
        }
        const prunableItemsSortedByAccessTime = prunableItems.sort((a, b) => a.lastAccess - b.lastAccess);
        while (totalSize >= exports.CACHE_PRUNING_THRESHOLD &&
            totalSizeAvailableToPrune > 0 &&
            prunableItemsSortedByAccessTime.length > 0) {
            const itemToPrune = prunableItemsSortedByAccessTime.shift();
            await metadataStore.removeItem(`source:${itemToPrune.cacheKey}`);
            await (0, fs_extra_1.unlink)(itemToPrune.inputCacheFile);
            delete tracking[itemToPrune.cacheKey];
            totalSize -= itemToPrune.size;
            totalSizeAvailableToPrune -= itemToPrune.size;
        }
        await metadataStore.setItem(USAGE_TRACKING_KEY, tracking);
    }
    finally {
        trackingLock.release();
    }
}
async function loadSourceImage({ cacheDir, url, requestEtag, modifiers, isLocal, requestHeaders = {} }) {
    const fileCache = (0, path_1.join)(cacheDir, 'cache');
    const metadataCache = (0, path_1.join)(cacheDir, 'metadata');
    await (0, fs_extra_1.ensureDir)(fileCache);
    await (0, fs_extra_1.ensureDir)(metadataCache);
    const metadataStore = (0, unstorage_1.createStorage)({
        driver: (0, fs_1.default)({ base: metadataCache })
    });
    const cacheKey = String((0, murmurhash_1.default)(url));
    const inputCacheFile = (0, path_1.join)(fileCache, cacheKey);
    await markUsageStart(metadataStore, cacheKey, inputCacheFile);
    await maybePruneCache(metadataStore);
    function finalize() {
        return markUsageComplete(metadataStore, cacheKey);
    }
    try {
        const headers = new node_fetch_1.Headers(requestHeaders);
        let sourceMetadata;
        if ((0, fs_extra_1.existsSync)(inputCacheFile)) {
            sourceMetadata = (await metadataStore.getItem(`source:${cacheKey}`));
            if (sourceMetadata) {
                //  Ideally use etag
                if (sourceMetadata.etag) {
                    headers.set('If-None-Match', sourceMetadata.etag);
                }
                else if (sourceMetadata.lastModified) {
                    headers.set('If-Modified-Since', sourceMetadata.lastModified);
                }
                else {
                    // If we have neither, the cachefile is useless
                    await (0, fs_extra_1.unlink)(inputCacheFile);
                }
            }
        }
        let response;
        try {
            response = await (0, node_fetch_1.default)(url, {
                headers
            });
        }
        catch (e) {
            return {
                response: {
                    statusCode: GATEWAY_ERROR,
                    headers: {
                        'Content-Type': 'text/plain'
                    },
                    body: `Error loading source image: ${e.message} ${url}`
                },
                finalize
            };
        }
        const sourceEtag = response.headers.get('etag');
        const sourceLastModified = response.headers.get('last-modified');
        const metadata = {
            etag: sourceEtag || (sourceMetadata === null || sourceMetadata === void 0 ? void 0 : sourceMetadata.etag),
            lastModified: sourceLastModified || (sourceMetadata === null || sourceMetadata === void 0 ? void 0 : sourceMetadata.lastModified)
        };
        await metadataStore.setItem(`source:${cacheKey}`, metadata);
        // We try to contruct an etag without downloading or processing the image, but we need
        // either an etag or a last-modified date for the source image to do so.
        let responseEtag;
        if (metadata.etag || metadata.lastModified) {
            // etag returns a quoted string for some reason
            responseEtag = JSON.parse((0, etag_1.default)(`${cacheKey}${metadata.etag || metadata.lastModified}${modifiers}`));
            if (requestEtag && (requestEtag === responseEtag)) {
                return {
                    response: {
                        statusCode: NOT_MODIFIED
                    },
                    finalize
                };
            }
        }
        if (response.status === NOT_MODIFIED) {
            return { cacheKey, responseEtag, finalize };
        }
        if (!response.ok) {
            return {
                response: {
                    statusCode: isLocal ? response.status : GATEWAY_ERROR,
                    body: `Source image server responsed with ${response.status} ${response.statusText}`,
                    headers: {
                        'Content-Type': 'text/plain'
                    }
                },
                finalize
            };
        }
        const outfile = (0, fs_extra_1.createWriteStream)(inputCacheFile);
        await new Promise((resolve, reject) => {
            outfile.on('finish', resolve);
            outfile.on('error', reject);
            response.body.pipe(outfile);
        });
        return { cacheKey, responseEtag, finalize };
    }
    catch (e) {
        await finalize();
        throw e;
    }
}
exports.loadSourceImage = loadSourceImage;
