"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSourceImage = void 0;
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const node_fetch_1 = __importStar(require("node-fetch"));
const unstorage_1 = require("unstorage");
const fs_1 = __importDefault(require("unstorage/drivers/fs"));
const murmurhash_1 = __importDefault(require("murmurhash"));
const etag_1 = __importDefault(require("etag"));
const NOT_MODIFIED = 304;
const GATEWAY_ERROR = 502;
async function loadSourceImage({ cacheDir, url, requestEtag, modifiers, isLocal, requestHeaders = {} }) {
    const fileCache = (0, path_1.join)(cacheDir, 'cache');
    const metadataCache = (0, path_1.join)(cacheDir, 'metadata');
    await (0, fs_extra_1.ensureDir)(fileCache);
    await (0, fs_extra_1.ensureDir)(metadataCache);
    const metadataStore = (0, unstorage_1.createStorage)({
        driver: (0, fs_1.default)({ base: metadataCache })
    });
    const cacheKey = String((0, murmurhash_1.default)(url));
    const inputCacheFile = (0, path_1.join)(fileCache, cacheKey);
    const headers = new node_fetch_1.Headers(requestHeaders);
    let sourceMetadata;
    if ((0, fs_extra_1.existsSync)(inputCacheFile)) {
        sourceMetadata = (await metadataStore.getItem(`source:${cacheKey}`));
        if (sourceMetadata) {
            //  Ideally use etag
            if (sourceMetadata.etag) {
                headers.set('If-None-Match', sourceMetadata.etag);
            }
            else if (sourceMetadata.lastModified) {
                headers.set('If-Modified-Since', sourceMetadata.lastModified);
            }
            else {
                // If we have neither, the cachefile is useless
                await (0, fs_extra_1.unlink)(inputCacheFile);
            }
        }
    }
    let response;
    try {
        response = await (0, node_fetch_1.default)(url, {
            headers
        });
    }
    catch (e) {
        return {
            response: {
                statusCode: GATEWAY_ERROR,
                headers: {
                    'Content-Type': 'text/plain'
                },
                body: `Error loading source image: ${e.message} ${url}`
            }
        };
    }
    const sourceEtag = response.headers.get('etag');
    const sourceLastModified = response.headers.get('last-modified');
    const metadata = {
        etag: sourceEtag || (sourceMetadata === null || sourceMetadata === void 0 ? void 0 : sourceMetadata.etag),
        lastModified: sourceLastModified || (sourceMetadata === null || sourceMetadata === void 0 ? void 0 : sourceMetadata.lastModified)
    };
    await metadataStore.setItem(`source:${cacheKey}`, metadata);
    // We try to contruct an etag without downloading or processing the image, but we need
    // either an etag or a last-modified date for the source image to do so.
    let responseEtag;
    if (metadata.etag || metadata.lastModified) {
        // etag returns a quoted string for some reason
        responseEtag = JSON.parse((0, etag_1.default)(`${cacheKey}${metadata.etag || metadata.lastModified}${modifiers}`));
        if (requestEtag && (requestEtag === responseEtag)) {
            return {
                response: {
                    statusCode: NOT_MODIFIED
                }
            };
        }
    }
    if (response.status === NOT_MODIFIED) {
        return { cacheKey, responseEtag };
    }
    if (!response.ok) {
        return {
            response: {
                statusCode: isLocal ? response.status : GATEWAY_ERROR,
                body: `Source image server responsed with ${response.status} ${response.statusText}`,
                headers: {
                    'Content-Type': 'text/plain'
                }
            }
        };
    }
    const outfile = (0, fs_extra_1.createWriteStream)(inputCacheFile);
    await new Promise((resolve, reject) => {
        outfile.on('finish', resolve);
        outfile.on('error', reject);
        response.body.pipe(outfile);
    });
    return { cacheKey, responseEtag };
}
exports.loadSourceImage = loadSourceImage;
