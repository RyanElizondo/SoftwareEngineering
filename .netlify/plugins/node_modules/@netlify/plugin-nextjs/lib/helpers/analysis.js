"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractConfigFromFile = exports.validateConfigValue = void 0;
const fs_1 = __importStar(require("fs"));
const pathe_1 = require("pathe");
const validateConfigValue = (config, apiFilePath) => {
    if (config.type === "experimental-scheduled" /* ApiRouteType.SCHEDULED */) {
        if (!config.schedule) {
            console.error(`Invalid config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}: schedule is required when type is "${"experimental-scheduled" /* ApiRouteType.SCHEDULED */}"`);
            return false;
        }
        if (config.runtime === 'experimental-edge') {
            console.error(`Invalid config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}: edge runtime is not supported for scheduled functions`);
            return false;
        }
        return true;
    }
    if (!config.type || config.type === "experimental-background" /* ApiRouteType.BACKGROUND */) {
        if (config.schedule) {
            console.error(`Invalid config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}: schedule is not allowed unless type is "${"experimental-scheduled" /* ApiRouteType.SCHEDULED */}"`);
            return false;
        }
        if (config.type && config.runtime === 'experimental-edge') {
            console.error(`Invalid config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}: edge runtime is not supported for background functions`);
            return false;
        }
        return true;
    }
    console.error(`Invalid config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}: type ${config.type} is not supported`);
    return false;
};
exports.validateConfigValue = validateConfigValue;
let extractConstValue;
let parseModule;
let hasWarnedAboutNextVersion = false;
/**
 * Uses Next's swc static analysis to extract the config values from a file.
 */
const extractConfigFromFile = async (apiFilePath) => {
    if (!apiFilePath || !(0, fs_1.existsSync)(apiFilePath)) {
        return {};
    }
    try {
        if (!extractConstValue) {
            extractConstValue = require('next/dist/build/analysis/extract-const-value');
        }
        if (!parseModule) {
            // eslint-disable-next-line prefer-destructuring, @typescript-eslint/no-var-requires
            parseModule = require('next/dist/build/analysis/parse-module').parseModule;
        }
    }
    catch (error) {
        if (error.code === 'MODULE_NOT_FOUND') {
            if (!hasWarnedAboutNextVersion) {
                console.log("This version of Next.js doesn't support advanced API routes. Skipping...");
                hasWarnedAboutNextVersion = true;
            }
            // Old Next.js version
            return {};
        }
        throw error;
    }
    const { extractExportedConstValue, UnsupportedValueError } = extractConstValue;
    const fileContent = await fs_1.default.promises.readFile(apiFilePath, 'utf8');
    // No need to parse if there's no "config"
    if (!fileContent.includes('config')) {
        return {};
    }
    const ast = await parseModule(apiFilePath, fileContent);
    let config;
    try {
        config = extractExportedConstValue(ast, 'config');
    }
    catch (error) {
        if (UnsupportedValueError && error instanceof UnsupportedValueError) {
            console.warn(`Unsupported config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}`);
        }
        return {};
    }
    if ((0, exports.validateConfigValue)(config, apiFilePath)) {
        return config;
    }
    throw new Error(`Unsupported config value in ${(0, pathe_1.relative)(process.cwd(), apiFilePath)}`);
};
exports.extractConfigFromFile = extractConfigFromFile;
