"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onPreDev = void 0;
const path_1 = require("path");
const stream_1 = require("stream");
const execa_1 = __importDefault(require("execa"));
const fs_extra_1 = require("fs-extra");
const merge_stream_1 = __importDefault(require("merge-stream"));
const edge_1 = require("./edge");
const files_1 = require("./files");
// The types haven't been updated yet
const onPreDev = async ({ constants, netlifyConfig }) => {
    var _a;
    const base = (_a = netlifyConfig.build.base) !== null && _a !== void 0 ? _a : process.cwd();
    // Need to patch the files, because build might not have been run
    await (0, files_1.patchNextFiles)(base);
    //  Clean up old functions
    await (0, fs_extra_1.unlink)((0, path_1.resolve)('.netlify', 'middleware.js')).catch(() => {
        // Ignore if it doesn't exist
    });
    await (0, edge_1.writeDevEdgeFunction)(constants);
    // Eventually we might want to do this via esbuild's API, but for now the CLI works fine
    const common = [`--bundle`, `--outdir=${(0, path_1.resolve)('.netlify')}`, `--format=esm`, `--target=esnext`, '--watch'];
    const opts = {
        all: true,
        env: { ...process.env, FORCE_COLOR: '1' },
    };
    // TypeScript
    const tsout = (0, execa_1.default)(`esbuild`, [...common, (0, path_1.resolve)(base, 'middleware.ts')], opts).all;
    // JavaScript
    const jsout = (0, execa_1.default)(`esbuild`, [...common, (0, path_1.resolve)(base, 'middleware.js')], opts).all;
    const filter = new stream_1.Transform({
        transform(chunk, encoding, callback) {
            const str = chunk.toString(encoding);
            // Skip if message includes this, because we run even when the files are missing
            if (!str.includes('[ERROR] Could not resolve')) {
                this.push(chunk);
            }
            callback();
        },
    });
    (0, merge_stream_1.default)(tsout, jsout).pipe(filter).pipe(process.stdout);
    // Don't return the promise because we don't want to wait for the child process to finish
};
exports.onPreDev = onPreDev;
