"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolverForSourceFiles = exports.getResolverForPages = exports.getResolverForDependencies = exports.getAllPageDependencies = exports.getUniqueDependencies = void 0;
const globby_1 = __importDefault(require("globby"));
const outdent_1 = require("outdent");
const pathe_1 = require("pathe");
const constants_1 = require("../constants");
const files_1 = require("../helpers/files");
// Generate a file full of require.resolve() calls for all the pages in the
// build. This is used by the nft bundler to find all the pages.
const getUniqueDependencies = async (sourceFiles) => {
    const dependencies = await Promise.all(sourceFiles.map((sourceFile) => (0, files_1.getDependenciesOfFile)(sourceFile)));
    return [...new Set([...sourceFiles, ...dependencies.flat()])].sort();
};
exports.getUniqueDependencies = getUniqueDependencies;
const getAllPageDependencies = async (publish) => {
    const root = (0, pathe_1.resolve)(publish, 'server');
    const pageFiles = await (0, globby_1.default)('{pages,app}/**/*.js', {
        cwd: root,
        dot: true,
    });
    // We don't use `absolute: true` because that returns Windows paths on Windows.
    // Instead we use pathe to normalize the paths.
    return (0, exports.getUniqueDependencies)(pageFiles.map((pageFile) => (0, pathe_1.join)(root, pageFile)));
};
exports.getAllPageDependencies = getAllPageDependencies;
const getResolverForDependencies = ({ dependencies, functionDir, }) => {
    const pageFiles = dependencies.map((file) => `require.resolve('${(0, pathe_1.relative)(functionDir, file)}')`);
    return (0, outdent_1.outdent /* javascript */) `
    // This file is purely to allow nft to know about these pages. 
    exports.resolvePages = () => {
        try {
            ${pageFiles.join('\n        ')}
        } catch {}
    }
  `;
};
exports.getResolverForDependencies = getResolverForDependencies;
const getResolverForPages = async (publish) => {
    const functionDir = (0, pathe_1.resolve)('.netlify', 'functions', constants_1.HANDLER_FUNCTION_NAME);
    const dependencies = await (0, exports.getAllPageDependencies)(publish);
    return (0, exports.getResolverForDependencies)({ dependencies, functionDir });
};
exports.getResolverForPages = getResolverForPages;
const getResolverForSourceFiles = async ({ functionsDir, sourceFiles, }) => {
    // We don't need the actual name, just the relative path.
    const functionDir = (0, pathe_1.resolve)(functionsDir, 'functionName');
    const dependencies = await (0, exports.getUniqueDependencies)(sourceFiles);
    return (0, exports.getResolverForDependencies)({ dependencies, functionDir });
};
exports.getResolverForSourceFiles = getResolverForSourceFiles;
